{
  "entries": [
    {
      "id": 1,
      "date": "2019-10-18",
      "title": "Event Listeners",
      "content": "Yesterday, I was working with event listeners. I had one event listener looking for an event of when a \"Create\" button was pressed, and that button would create an element that had a \"Delete\" button created. The first event listener called a function, and in that function there was the event listener for the delete button. I tried to put the event listener for the delete button within the event listener for the create button, but that didn't work. Putting the delete button event listener in the function that was called, however, did work.",
      "mood": "Tired"
    },
    {
      "id": 2,
      "date": "2019-10-18",
      "title": "Targeting Elements on the DOM",
      "content": "I've learned a few ways to target elements on the dom. I can use .querySelector() to find the first item that meets my criteria, or .querySelectorAll() to find all that meet my criteria. When using .querySelector(), I must specify with # or . if searching for an id or class. .querySelectorAll() returns a node list, which I can use like an array. If I use .getElementByID or .getElementByClassname, I do not need to specify that I'm searching for an id or class because it is implied in the method.",
      "mood": "Hopeful"
    },
    {
      "id": 3,
      "date": "2019-10-18",
      "title": "API",
      "content": "API's allow us to access large amounts of data. I believe JSON is a language/data structure that looks a lot like JavaScript, and it stands for \"JavaScript Object Notation\". We use fetch to access the JSON data in an API, and we convert that into JavaScript. It's still really confusing to me how, and what all I can do with this, but I do know that it will allow us to access the world of information provided on the internet in some incredible ways.",
      "mood": "Impostor Syndrome"
    },
    {
      "id": 4,
      "date": "2019-10-18",
      "title": "Functions",
      "content": "I really understand functions. I think. As far as we have used them so far, I understand them. I spent most of my time while learning to code before NSS working in Python, and I love functions. Functions are like blueprints of code that allow us to reuse our code over and over again. They allow for DRY code, clean code, and for our programs to do powerful tasks. Functions take Parameters (placeholder variables), and when we call a function, we insert Arguments (actual data types / variables) into the appropriate spots where those Parameters were placed.",
      "mood": "Great!"
    },
    {
      "date": "2019-10-29",
      "title": "Journal 7 (POST)",
      "content": "Today, I worked on Journals 6 and 7. In seven, I had to do my first fetch call with \"POST\", and it was a little intimidating. This journal entry is my very first attempt to POST, and I hope it works!",
      "mood": "Hopeful",
      "id": 5
    },
    {
      "date": "2019-10-30",
      "title": "Steve Talk (POST and Abyss of Despair)",
      "content": "Steve came in today and walked us through POST for the Journal 7 activity. He drew on the whiteboard to show how to modularize the code, and the signal flow from imports and function calls.",
      "mood": "Happy",
      "id": 6
    },
    {
      "date": "2019-10-31",
      "title": "Steve Talk (EDIT) and CSS with Julian",
      "content": "Steve talked to us about the edit process. In CRUD (Create Read Update Delete), edit with be the \"U\" or update. You have to target something that exists, change it, and then use PUT to replace the old thing with the new thing. To EDIT, which is crud is UPDATE, you need to do a fetch call with PUT.\n\nAlso, I was stuck with some flex-box concepts for the Journal entry. I wanted my radio buttons for the mood-filter to display in a specific 3 column format. Julian helped me immensely. One issue I was running into was that Fieldset was my parent, and I think Fieldset makes a poor parent. For one thing, it has this child called Legend, and I think Legend's main job is to mess with the other children. We ended up putting divs around 3 sets of mood buttons, and wrapped all of those divs inside an article tag, so that the new parent was Article, and there were only 3 children. We also made each div a parent to 3 mood buttons. It worked! Remember to lean on your teammates.",
      "mood": "Impostor Syndrome",
      "id": 7
    },
    {
      "date": "2019-11-01",
      "title": "November and Character Length feature",
      "content": "On Daily Journal 7 and 8, I went down a rabbit hole to get a twitter-like character length warning to appear in the \"Concepts Covered\" and \"Journal Entry\" fields. The real trick I found was trying to get the warning to only be visible when the user was inside the appropriate text-box. The solution was to add an event listener inside my other event listener that checked for a \"blur\" event. When the box is selected, it is a \"Focus\" event, but a \"Blur\" event happens when a box loses focus.",
      "mood": "Tired",
      "id": 8
    },
    {
      "date": "2019-11-01",
      "title": "Modularization for events and using functions",
      "content": "It took me a while, but I removed my record button event listener from my main js file and put it inside of an object in an event manager js file. Then, turned it into a general function that wasn't actually an event listener, but only the function that an event listener would run when an event happens. I created two event listeners to call that function, one for \"click\" and one for pressing the \"enter\" key. It works!",
      "mood": "Great!",
      "id": 9
    },
    {
      "date": "2019-11-01",
      "title": "In JavaScript, pressing Enter is a Click Event",
      "content": "So my last journal entry about creating 2 event handlers for the record button (one for click, and one for enter) wasn't as good as I thought. Every time I used Enter, it would first do a click event, and then try and do it again as an enter keyup (I had a conditional if (event.keycode === 13). Working with Kristen, we eventually realized that in JavaScript, pressing enter somehow automatically triggers a click event. We aren't sure why yet.",
      "mood": "Impostor Syndrome",
      "id": 10
    },
    {
      "date": "2019-11-01",
      "title": "Journal 8 (Mood Filtering)",
      "content": "This one was challenging. I had to create the HTML for the mood buttons, flexbox them in CSS, filter them in JavaScript, add eventListeners to each one, filter the entries from the API, and render to the DOM the filtered options. I went down so many rabbit holes, and I learned a lot in the process. I'm glad I had a lab day today, I needed the freedom to try things.",
      "mood": "Grateful",
      "id": 11
    },
    {
      "date": "2019-11-04",
      "title": "Webpack",
      "content": "Today, we discussed Webpack. From what I understand, Webpack will run a server, and run json-server, and does other things for us like eslinting, converting ES6 to ES5 for browser compatibility, that sort of thing. We aren't diving too far into the weeds on how it works, but we will be using the tool. The instructors say that React will use webpack behind the scenes for us, so I guess we need to understand the concept of what it's doing for us.",
      "mood": "Stressed",
      "id": 12
    },
    {
      "date": "2019-11-04",
      "title": "Delete Functionality",
      "content": "Today, I worked on the delete functionality. I got tripped up in a few places. One, I had to call my deleteButton event listener after my fetch call, as my fetch call must be complete before there are delete buttons on the DOM. Second, because of the first reason, I had to make sure to re-call the event listener every time the Dom was rendered. Also, .then() statements take function DEFINITIONS, not function calls. Now that I've done those things... delete works!",
      "mood": "Happy",
      "id": 13
    },
    {
      "date": "2019-11-05",
      "title": "ERDs",
      "content": "Today we talked about ERD's, or \"Entity Relationship Diagrams\". These diagrams are used to plan data structures. The relationships can be \"One to One,\" \"One to Many,\" and \"Many to Many.\" With Many to Many relationships, an additional entity (or table?) is added that functions as the \"Intersection\" table.",
      "mood": "Stressed",
      "id": 14
    },
    {
      "date": "2019-11-05",
      "title": "Edit (PUT)",
      "content": "Today was rough. I worked on the Edit part of the daily journal and it just about broke me. The hiccup was making sure that the page refreshed correctly, without losing event listeners, functionality, or my character validator. I eventually created a function that looped through all of my event listeners and called them. I made a function called getRenderListenWatch that would get all entries, then Render all my render-things, then call all of my event listeners, then watch for character validation. It was really cool when it worked, but I'm fried. I've learned a lot today. I need to walk away and process, come in fresh tomorrow.",
      "mood": "Sad",
      "id": 15
    },
    {
      "date": "2019-11-06",
      "title": "Advanced Objects (search exercise)",
      "content": "I completed the Advanced Objects exercise that iterated through an object to print to the DOM, and allowed a user to search for any value that would be associated with a sales agent (like name, phone number, email). If the value being searched for was found inside the object, that sales agent was rendered to the DOM. I'm feeling behind, but I can at least cross this exercise off of my list! Performing this exercise will give me the tools to begin Journal 11.",
      "mood": "Hopeful",
      "id": 16
    }
  ]
}